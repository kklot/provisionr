% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/provision_library.R
\name{provision_library}
\alias{provision_library}
\title{Create or update a library}
\usage{
provision_library(packages, lib, platform = NULL, version = NULL,
  src = NULL, check_dependencies = TRUE,
  installed_action = "upgrade", allow_missing = FALSE,
  refresh_drat = FALSE, quiet = FALSE, progress = NULL)
}
\arguments{
\item{packages}{A character vector of packages to include}

\item{lib}{A path to the library; if it does not exist, it will be
created.  If given as a vector of libraries (i.e., with more
than one element) then packages will be installed into the first
library, but subsequent libraries will be checked to make sure
that dependencies are satisfied.}

\item{platform}{The platform to create the library for.  If
\code{NULL} then we build for the current platform (using
\code{install_packages} if \code{version} is \code{NULL} or
compatible with our current version).  Otherwise this can be one
of \code{"windows"}, \code{"macosx"}, \code{"macosx/mavericks"}
or \code{"linux"}, correspinding to the different directories
that binaries live in (in the case of \code{"linux"} there are
no binaries and things are a little more complicated).}

\item{version}{The version of R to install packages for.  By
default, we use the same version (major.minor) as the current
running R version.  Otherwise provide the desired version number
as a string or \code{numeric_version} object.}

\item{src}{An optional description of additional packages, using
\code{\link{package_sources}}.  It will only be rebuilt
(fetching packages) if it has \emph{never} been built, or of
packages listed in the \code{spec} element are not found in the
repository.}

\item{check_dependencies}{Logical, indicating if dependencies of
\code{packges} should be checked.  If \code{TRUE}, then any
missing dependencies (packages in Depends, Imports or LinkingTo
of the requested packages) will be installed.}

\item{installed_action}{The behaviour when some packages are
already installed.  Options are \code{"replace"} (will
re-install the package and, for cross-installation, its
dependencies), \code{"upgrade_all"} (upgrade all packages that
lag behind the versions in repositories), \code{"upgrade"}
(upgrade packages listed in \code{"packages"} only, but not
their dependencies) and \code{"skip"} (do not install or upgrade
any package that is already installed).}

\item{allow_missing}{For cross-installation (via
\code{cross_install} when \code{platform} is non-\code{NULL}),
allow packages to be missing that need to be compiled?  The
interface here is going to change a bunch, so watch out...}

\item{refresh_drat}{Logical indicating if the cache of packages
pointed to by \code{src} should be refreshed.  The other way of
forcing this would be to pass \code{expire = 0} through to the
\code{package_sources} argument but this is likely to be tidier.}

\item{quiet}{Passed through to to \code{\link{install.packages}},
indicating if package installation should be done quietly.  With
this as \code{FALSE} (the default) rather a lot of output can be
generated.}

\item{progress}{Passed through to the package downloading to
control printing of the progress bar.}
}
\description{
Create or update a library of packages.
}
\details{
Cross installation of binary files is difficult and I need to come
up with a way of making that work nicely.
}
\author{
Rich FitzJohn
}
